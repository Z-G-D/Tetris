// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tetris.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tetris_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tetris_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tetris_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tetris_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tetris_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_tetris_2eproto_metadata_getter(int index);
namespace proto {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Information;
struct InformationDefaultTypeInternal;
extern InformationDefaultTypeInternal _Information_default_instance_;
class Instruction;
struct InstructionDefaultTypeInternal;
extern InstructionDefaultTypeInternal _Instruction_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Account* Arena::CreateMaybeMessage<::proto::Account>(Arena*);
template<> ::proto::Information* Arena::CreateMaybeMessage<::proto::Information>(Arena*);
template<> ::proto::Instruction* Arena::CreateMaybeMessage<::proto::Instruction>(Arena*);
template<> ::proto::Message* Arena::CreateMaybeMessage<::proto::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum Account_Status : int {
  Account_Status_success = 0,
  Account_Status_failed = 1,
  Account_Status_username_in_Used = 2,
  Account_Status_alias_in_used = 3,
  Account_Status_Account_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Account_Status_Account_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Account_Status_IsValid(int value);
constexpr Account_Status Account_Status_Status_MIN = Account_Status_success;
constexpr Account_Status Account_Status_Status_MAX = Account_Status_alias_in_used;
constexpr int Account_Status_Status_ARRAYSIZE = Account_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Account_Status_descriptor();
template<typename T>
inline const std::string& Account_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Account_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Account_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Account_Status_descriptor(), enum_t_value);
}
inline bool Account_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Account_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Account_Status>(
    Account_Status_descriptor(), name, value);
}
// ===================================================================

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  virtual ~Account();
  explicit constexpr Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tetris_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Account_Status Status;
  static constexpr Status success =
    Account_Status_success;
  static constexpr Status failed =
    Account_Status_failed;
  static constexpr Status username_in_Used =
    Account_Status_username_in_Used;
  static constexpr Status alias_in_used =
    Account_Status_alias_in_used;
  static inline bool Status_IsValid(int value) {
    return Account_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Account_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Account_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Account_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Account_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Account_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Account_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kAliasFieldNumber = 3,
    kAvatarFieldNumber = 4,
    kOriginalUsernameFieldNumber = 7,
    kOriginalPasswordFieldNumber = 8,
    kOriginalAliasFieldNumber = 9,
    kRankPointFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string avatar = 4;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string original_username = 7;
  void clear_original_username();
  const std::string& original_username() const;
  void set_original_username(const std::string& value);
  void set_original_username(std::string&& value);
  void set_original_username(const char* value);
  void set_original_username(const char* value, size_t size);
  std::string* mutable_original_username();
  std::string* release_original_username();
  void set_allocated_original_username(std::string* original_username);
  private:
  const std::string& _internal_original_username() const;
  void _internal_set_original_username(const std::string& value);
  std::string* _internal_mutable_original_username();
  public:

  // string original_password = 8;
  void clear_original_password();
  const std::string& original_password() const;
  void set_original_password(const std::string& value);
  void set_original_password(std::string&& value);
  void set_original_password(const char* value);
  void set_original_password(const char* value, size_t size);
  std::string* mutable_original_password();
  std::string* release_original_password();
  void set_allocated_original_password(std::string* original_password);
  private:
  const std::string& _internal_original_password() const;
  void _internal_set_original_password(const std::string& value);
  std::string* _internal_mutable_original_password();
  public:

  // string original_alias = 9;
  void clear_original_alias();
  const std::string& original_alias() const;
  void set_original_alias(const std::string& value);
  void set_original_alias(std::string&& value);
  void set_original_alias(const char* value);
  void set_original_alias(const char* value, size_t size);
  std::string* mutable_original_alias();
  std::string* release_original_alias();
  void set_allocated_original_alias(std::string* original_alias);
  private:
  const std::string& _internal_original_alias() const;
  void _internal_set_original_alias(const std::string& value);
  std::string* _internal_mutable_original_alias();
  public:

  // int32 rankPoint = 5;
  void clear_rankpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 rankpoint() const;
  void set_rankpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rankpoint() const;
  void _internal_set_rankpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .proto.Account.Status status = 6;
  void clear_status();
  ::proto::Account_Status status() const;
  void set_status(::proto::Account_Status value);
  private:
  ::proto::Account_Status _internal_status() const;
  void _internal_set_status(::proto::Account_Status value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_alias_;
  ::PROTOBUF_NAMESPACE_ID::int32 rankpoint_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tetris_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  virtual ~Message();
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tetris_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAliasFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string alias = 1;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:proto.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tetris_2eproto;
};
// -------------------------------------------------------------------

class Information PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Information) */ {
 public:
  inline Information() : Information(nullptr) {}
  virtual ~Information();
  explicit constexpr Information(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Information(const Information& from);
  Information(Information&& from) noexcept
    : Information() {
    *this = ::std::move(from);
  }

  inline Information& operator=(const Information& from) {
    CopyFrom(from);
    return *this;
  }
  inline Information& operator=(Information&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Information& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kConnect = 1,
    kDisconnect = 2,
    kKeepAlive = 3,
    kSignup = 4,
    kLogin = 5,
    kAlter = 6,
    kGame9 = 7,
    kGame1V1 = 8,
    kGameSingle = 9,
    kMessage = 10,
    kPoints = 11,
    kError = 12,
    TYPE_NOT_SET = 0,
  };

  static inline const Information* internal_default_instance() {
    return reinterpret_cast<const Information*>(
               &_Information_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Information& a, Information& b) {
    a.Swap(&b);
  }
  inline void Swap(Information* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Information* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Information* New() const final {
    return CreateMaybeMessage<Information>(nullptr);
  }

  Information* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Information>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Information& from);
  void MergeFrom(const Information& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Information* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Information";
  }
  protected:
  explicit Information(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tetris_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectFieldNumber = 1,
    kDisconnectFieldNumber = 2,
    kKeepAliveFieldNumber = 3,
    kSignupFieldNumber = 4,
    kLoginFieldNumber = 5,
    kAlterFieldNumber = 6,
    kGame9FieldNumber = 7,
    kGame1V1FieldNumber = 8,
    kGameSingleFieldNumber = 9,
    kMessageFieldNumber = 10,
    kPointsFieldNumber = 11,
    kErrorFieldNumber = 12,
  };
  // int32 connect = 1;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  ::PROTOBUF_NAMESPACE_ID::int32 connect() const;
  void set_connect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connect() const;
  void _internal_set_connect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 disconnect = 2;
  bool has_disconnect() const;
  private:
  bool _internal_has_disconnect() const;
  public:
  void clear_disconnect();
  ::PROTOBUF_NAMESPACE_ID::int32 disconnect() const;
  void set_disconnect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_disconnect() const;
  void _internal_set_disconnect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 keepAlive = 3;
  bool has_keepalive() const;
  private:
  bool _internal_has_keepalive() const;
  public:
  void clear_keepalive();
  ::PROTOBUF_NAMESPACE_ID::int32 keepalive() const;
  void set_keepalive(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keepalive() const;
  void _internal_set_keepalive(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .proto.Account signup = 4;
  bool has_signup() const;
  private:
  bool _internal_has_signup() const;
  public:
  void clear_signup();
  const ::proto::Account& signup() const;
  ::proto::Account* release_signup();
  ::proto::Account* mutable_signup();
  void set_allocated_signup(::proto::Account* signup);
  private:
  const ::proto::Account& _internal_signup() const;
  ::proto::Account* _internal_mutable_signup();
  public:
  void unsafe_arena_set_allocated_signup(
      ::proto::Account* signup);
  ::proto::Account* unsafe_arena_release_signup();

  // .proto.Account login = 5;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const ::proto::Account& login() const;
  ::proto::Account* release_login();
  ::proto::Account* mutable_login();
  void set_allocated_login(::proto::Account* login);
  private:
  const ::proto::Account& _internal_login() const;
  ::proto::Account* _internal_mutable_login();
  public:
  void unsafe_arena_set_allocated_login(
      ::proto::Account* login);
  ::proto::Account* unsafe_arena_release_login();

  // .proto.Account alter = 6;
  bool has_alter() const;
  private:
  bool _internal_has_alter() const;
  public:
  void clear_alter();
  const ::proto::Account& alter() const;
  ::proto::Account* release_alter();
  ::proto::Account* mutable_alter();
  void set_allocated_alter(::proto::Account* alter);
  private:
  const ::proto::Account& _internal_alter() const;
  ::proto::Account* _internal_mutable_alter();
  public:
  void unsafe_arena_set_allocated_alter(
      ::proto::Account* alter);
  ::proto::Account* unsafe_arena_release_alter();

  // int32 game9 = 7;
  bool has_game9() const;
  private:
  bool _internal_has_game9() const;
  public:
  void clear_game9();
  ::PROTOBUF_NAMESPACE_ID::int32 game9() const;
  void set_game9(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game9() const;
  void _internal_set_game9(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 game1v1 = 8;
  bool has_game1v1() const;
  private:
  bool _internal_has_game1v1() const;
  public:
  void clear_game1v1();
  ::PROTOBUF_NAMESPACE_ID::int32 game1v1() const;
  void set_game1v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game1v1() const;
  void _internal_set_game1v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 game_single = 9;
  bool has_game_single() const;
  private:
  bool _internal_has_game_single() const;
  public:
  void clear_game_single();
  ::PROTOBUF_NAMESPACE_ID::int32 game_single() const;
  void set_game_single(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_single() const;
  void _internal_set_game_single(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .proto.Message message = 10;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::proto::Message& message() const;
  ::proto::Message* release_message();
  ::proto::Message* mutable_message();
  void set_allocated_message(::proto::Message* message);
  private:
  const ::proto::Message& _internal_message() const;
  ::proto::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::proto::Message* message);
  ::proto::Message* unsafe_arena_release_message();

  // .proto.Account points = 11;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  const ::proto::Account& points() const;
  ::proto::Account* release_points();
  ::proto::Account* mutable_points();
  void set_allocated_points(::proto::Account* points);
  private:
  const ::proto::Account& _internal_points() const;
  ::proto::Account* _internal_mutable_points();
  public:
  void unsafe_arena_set_allocated_points(
      ::proto::Account* points);
  ::proto::Account* unsafe_arena_release_points();

  // int32 error = 12;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:proto.Information)
 private:
  class _Internal;
  void set_has_connect();
  void set_has_disconnect();
  void set_has_keepalive();
  void set_has_signup();
  void set_has_login();
  void set_has_alter();
  void set_has_game9();
  void set_has_game1v1();
  void set_has_game_single();
  void set_has_message();
  void set_has_points();
  void set_has_error();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 connect_;
    ::PROTOBUF_NAMESPACE_ID::int32 disconnect_;
    ::PROTOBUF_NAMESPACE_ID::int32 keepalive_;
    ::proto::Account* signup_;
    ::proto::Account* login_;
    ::proto::Account* alter_;
    ::PROTOBUF_NAMESPACE_ID::int32 game9_;
    ::PROTOBUF_NAMESPACE_ID::int32 game1v1_;
    ::PROTOBUF_NAMESPACE_ID::int32 game_single_;
    ::proto::Message* message_;
    ::proto::Account* points_;
    ::PROTOBUF_NAMESPACE_ID::int32 error_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tetris_2eproto;
};
// -------------------------------------------------------------------

class Instruction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Instruction) */ {
 public:
  inline Instruction() : Instruction(nullptr) {}
  virtual ~Instruction();
  explicit constexpr Instruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Instruction(const Instruction& from);
  Instruction(Instruction&& from) noexcept
    : Instruction() {
    *this = ::std::move(from);
  }

  inline Instruction& operator=(const Instruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instruction& operator=(Instruction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Instruction& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kClockwise = 1,
    kCounterclockwise = 2,
    kDown = 3,
    kRight = 4,
    kLeft = 5,
    kDrop = 6,
    kSwapBlock = 7,
    kStackClear = 8,
    kRandomSeed = 9,
    kReadyToStart = 10,
    kGameOver = 11,
    TYPE_NOT_SET = 0,
  };

  static inline const Instruction* internal_default_instance() {
    return reinterpret_cast<const Instruction*>(
               &_Instruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Instruction& a, Instruction& b) {
    a.Swap(&b);
  }
  inline void Swap(Instruction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Instruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Instruction* New() const final {
    return CreateMaybeMessage<Instruction>(nullptr);
  }

  Instruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Instruction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Instruction& from);
  void MergeFrom(const Instruction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instruction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Instruction";
  }
  protected:
  explicit Instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tetris_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClockwiseFieldNumber = 1,
    kCounterclockwiseFieldNumber = 2,
    kDownFieldNumber = 3,
    kRightFieldNumber = 4,
    kLeftFieldNumber = 5,
    kDropFieldNumber = 6,
    kSwapBlockFieldNumber = 7,
    kStackClearFieldNumber = 8,
    kRandomSeedFieldNumber = 9,
    kReadyToStartFieldNumber = 10,
    kGameOverFieldNumber = 11,
  };
  // int32 clockwise = 1;
  bool has_clockwise() const;
  private:
  bool _internal_has_clockwise() const;
  public:
  void clear_clockwise();
  ::PROTOBUF_NAMESPACE_ID::int32 clockwise() const;
  void set_clockwise(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clockwise() const;
  void _internal_set_clockwise(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 counterclockwise = 2;
  bool has_counterclockwise() const;
  private:
  bool _internal_has_counterclockwise() const;
  public:
  void clear_counterclockwise();
  ::PROTOBUF_NAMESPACE_ID::int32 counterclockwise() const;
  void set_counterclockwise(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_counterclockwise() const;
  void _internal_set_counterclockwise(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 down = 3;
  bool has_down() const;
  private:
  bool _internal_has_down() const;
  public:
  void clear_down();
  ::PROTOBUF_NAMESPACE_ID::int32 down() const;
  void set_down(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_down() const;
  void _internal_set_down(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 right = 4;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  ::PROTOBUF_NAMESPACE_ID::int32 right() const;
  void set_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right() const;
  void _internal_set_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 left = 5;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::int32 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left() const;
  void _internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drop = 6;
  bool has_drop() const;
  private:
  bool _internal_has_drop() const;
  public:
  void clear_drop();
  ::PROTOBUF_NAMESPACE_ID::int32 drop() const;
  void set_drop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drop() const;
  void _internal_set_drop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 swap_block = 7;
  bool has_swap_block() const;
  private:
  bool _internal_has_swap_block() const;
  public:
  void clear_swap_block();
  ::PROTOBUF_NAMESPACE_ID::int32 swap_block() const;
  void set_swap_block(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_swap_block() const;
  void _internal_set_swap_block(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stack_clear = 8;
  bool has_stack_clear() const;
  private:
  bool _internal_has_stack_clear() const;
  public:
  void clear_stack_clear();
  ::PROTOBUF_NAMESPACE_ID::int32 stack_clear() const;
  void set_stack_clear(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stack_clear() const;
  void _internal_set_stack_clear(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 random_seed = 9;
  bool has_random_seed() const;
  private:
  bool _internal_has_random_seed() const;
  public:
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_random_seed() const;
  void _internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ready_to_start = 10;
  bool has_ready_to_start() const;
  private:
  bool _internal_has_ready_to_start() const;
  public:
  void clear_ready_to_start();
  ::PROTOBUF_NAMESPACE_ID::int32 ready_to_start() const;
  void set_ready_to_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ready_to_start() const;
  void _internal_set_ready_to_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 game_over = 11;
  bool has_game_over() const;
  private:
  bool _internal_has_game_over() const;
  public:
  void clear_game_over();
  ::PROTOBUF_NAMESPACE_ID::int32 game_over() const;
  void set_game_over(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_over() const;
  void _internal_set_game_over(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:proto.Instruction)
 private:
  class _Internal;
  void set_has_clockwise();
  void set_has_counterclockwise();
  void set_has_down();
  void set_has_right();
  void set_has_left();
  void set_has_drop();
  void set_has_swap_block();
  void set_has_stack_clear();
  void set_has_random_seed();
  void set_has_ready_to_start();
  void set_has_game_over();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 clockwise_;
    ::PROTOBUF_NAMESPACE_ID::int32 counterclockwise_;
    ::PROTOBUF_NAMESPACE_ID::int32 down_;
    ::PROTOBUF_NAMESPACE_ID::int32 right_;
    ::PROTOBUF_NAMESPACE_ID::int32 left_;
    ::PROTOBUF_NAMESPACE_ID::int32 drop_;
    ::PROTOBUF_NAMESPACE_ID::int32 swap_block_;
    ::PROTOBUF_NAMESPACE_ID::int32 stack_clear_;
    ::PROTOBUF_NAMESPACE_ID::int32 random_seed_;
    ::PROTOBUF_NAMESPACE_ID::int32 ready_to_start_;
    ::PROTOBUF_NAMESPACE_ID::int32 game_over_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tetris_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// string username = 1;
inline void Account::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& Account::username() const {
  // @@protoc_insertion_point(field_get:proto.Account.username)
  return _internal_username();
}
inline void Account::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:proto.Account.username)
}
inline std::string* Account::mutable_username() {
  // @@protoc_insertion_point(field_mutable:proto.Account.username)
  return _internal_mutable_username();
}
inline const std::string& Account::_internal_username() const {
  return username_.Get();
}
inline void Account::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Account.username)
}
inline void Account::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Account.username)
}
inline void Account::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Account.username)
}
inline std::string* Account::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_username() {
  // @@protoc_insertion_point(field_release:proto.Account.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Account.username)
}

// string password = 2;
inline void Account::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& Account::password() const {
  // @@protoc_insertion_point(field_get:proto.Account.password)
  return _internal_password();
}
inline void Account::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:proto.Account.password)
}
inline std::string* Account::mutable_password() {
  // @@protoc_insertion_point(field_mutable:proto.Account.password)
  return _internal_mutable_password();
}
inline const std::string& Account::_internal_password() const {
  return password_.Get();
}
inline void Account::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Account.password)
}
inline void Account::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Account.password)
}
inline void Account::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Account.password)
}
inline std::string* Account::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_password() {
  // @@protoc_insertion_point(field_release:proto.Account.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Account.password)
}

// string alias = 3;
inline void Account::clear_alias() {
  alias_.ClearToEmpty();
}
inline const std::string& Account::alias() const {
  // @@protoc_insertion_point(field_get:proto.Account.alias)
  return _internal_alias();
}
inline void Account::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:proto.Account.alias)
}
inline std::string* Account::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:proto.Account.alias)
  return _internal_mutable_alias();
}
inline const std::string& Account::_internal_alias() const {
  return alias_.Get();
}
inline void Account::_internal_set_alias(const std::string& value) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_alias(std::string&& value) {
  
  alias_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Account.alias)
}
inline void Account::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Account.alias)
}
inline void Account::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Account.alias)
}
inline std::string* Account::_internal_mutable_alias() {
  
  return alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_alias() {
  // @@protoc_insertion_point(field_release:proto.Account.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Account.alias)
}

// string avatar = 4;
inline void Account::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& Account::avatar() const {
  // @@protoc_insertion_point(field_get:proto.Account.avatar)
  return _internal_avatar();
}
inline void Account::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:proto.Account.avatar)
}
inline std::string* Account::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:proto.Account.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& Account::_internal_avatar() const {
  return avatar_.Get();
}
inline void Account::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_avatar(std::string&& value) {
  
  avatar_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Account.avatar)
}
inline void Account::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Account.avatar)
}
inline void Account::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Account.avatar)
}
inline std::string* Account::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_avatar() {
  // @@protoc_insertion_point(field_release:proto.Account.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Account.avatar)
}

// int32 rankPoint = 5;
inline void Account::clear_rankpoint() {
  rankpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Account::_internal_rankpoint() const {
  return rankpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Account::rankpoint() const {
  // @@protoc_insertion_point(field_get:proto.Account.rankPoint)
  return _internal_rankpoint();
}
inline void Account::_internal_set_rankpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rankpoint_ = value;
}
inline void Account::set_rankpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rankpoint(value);
  // @@protoc_insertion_point(field_set:proto.Account.rankPoint)
}

// .proto.Account.Status status = 6;
inline void Account::clear_status() {
  status_ = 0;
}
inline ::proto::Account_Status Account::_internal_status() const {
  return static_cast< ::proto::Account_Status >(status_);
}
inline ::proto::Account_Status Account::status() const {
  // @@protoc_insertion_point(field_get:proto.Account.status)
  return _internal_status();
}
inline void Account::_internal_set_status(::proto::Account_Status value) {
  
  status_ = value;
}
inline void Account::set_status(::proto::Account_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:proto.Account.status)
}

// string original_username = 7;
inline void Account::clear_original_username() {
  original_username_.ClearToEmpty();
}
inline const std::string& Account::original_username() const {
  // @@protoc_insertion_point(field_get:proto.Account.original_username)
  return _internal_original_username();
}
inline void Account::set_original_username(const std::string& value) {
  _internal_set_original_username(value);
  // @@protoc_insertion_point(field_set:proto.Account.original_username)
}
inline std::string* Account::mutable_original_username() {
  // @@protoc_insertion_point(field_mutable:proto.Account.original_username)
  return _internal_mutable_original_username();
}
inline const std::string& Account::_internal_original_username() const {
  return original_username_.Get();
}
inline void Account::_internal_set_original_username(const std::string& value) {
  
  original_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_original_username(std::string&& value) {
  
  original_username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Account.original_username)
}
inline void Account::set_original_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Account.original_username)
}
inline void Account::set_original_username(const char* value,
    size_t size) {
  
  original_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Account.original_username)
}
inline std::string* Account::_internal_mutable_original_username() {
  
  return original_username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_original_username() {
  // @@protoc_insertion_point(field_release:proto.Account.original_username)
  return original_username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_original_username(std::string* original_username) {
  if (original_username != nullptr) {
    
  } else {
    
  }
  original_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Account.original_username)
}

// string original_password = 8;
inline void Account::clear_original_password() {
  original_password_.ClearToEmpty();
}
inline const std::string& Account::original_password() const {
  // @@protoc_insertion_point(field_get:proto.Account.original_password)
  return _internal_original_password();
}
inline void Account::set_original_password(const std::string& value) {
  _internal_set_original_password(value);
  // @@protoc_insertion_point(field_set:proto.Account.original_password)
}
inline std::string* Account::mutable_original_password() {
  // @@protoc_insertion_point(field_mutable:proto.Account.original_password)
  return _internal_mutable_original_password();
}
inline const std::string& Account::_internal_original_password() const {
  return original_password_.Get();
}
inline void Account::_internal_set_original_password(const std::string& value) {
  
  original_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_original_password(std::string&& value) {
  
  original_password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Account.original_password)
}
inline void Account::set_original_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Account.original_password)
}
inline void Account::set_original_password(const char* value,
    size_t size) {
  
  original_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Account.original_password)
}
inline std::string* Account::_internal_mutable_original_password() {
  
  return original_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_original_password() {
  // @@protoc_insertion_point(field_release:proto.Account.original_password)
  return original_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_original_password(std::string* original_password) {
  if (original_password != nullptr) {
    
  } else {
    
  }
  original_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Account.original_password)
}

// string original_alias = 9;
inline void Account::clear_original_alias() {
  original_alias_.ClearToEmpty();
}
inline const std::string& Account::original_alias() const {
  // @@protoc_insertion_point(field_get:proto.Account.original_alias)
  return _internal_original_alias();
}
inline void Account::set_original_alias(const std::string& value) {
  _internal_set_original_alias(value);
  // @@protoc_insertion_point(field_set:proto.Account.original_alias)
}
inline std::string* Account::mutable_original_alias() {
  // @@protoc_insertion_point(field_mutable:proto.Account.original_alias)
  return _internal_mutable_original_alias();
}
inline const std::string& Account::_internal_original_alias() const {
  return original_alias_.Get();
}
inline void Account::_internal_set_original_alias(const std::string& value) {
  
  original_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_original_alias(std::string&& value) {
  
  original_alias_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Account.original_alias)
}
inline void Account::set_original_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Account.original_alias)
}
inline void Account::set_original_alias(const char* value,
    size_t size) {
  
  original_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Account.original_alias)
}
inline std::string* Account::_internal_mutable_original_alias() {
  
  return original_alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_original_alias() {
  // @@protoc_insertion_point(field_release:proto.Account.original_alias)
  return original_alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_original_alias(std::string* original_alias) {
  if (original_alias != nullptr) {
    
  } else {
    
  }
  original_alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Account.original_alias)
}

// -------------------------------------------------------------------

// Message

// string alias = 1;
inline void Message::clear_alias() {
  alias_.ClearToEmpty();
}
inline const std::string& Message::alias() const {
  // @@protoc_insertion_point(field_get:proto.Message.alias)
  return _internal_alias();
}
inline void Message::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:proto.Message.alias)
}
inline std::string* Message::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:proto.Message.alias)
  return _internal_mutable_alias();
}
inline const std::string& Message::_internal_alias() const {
  return alias_.Get();
}
inline void Message::_internal_set_alias(const std::string& value) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message::set_alias(std::string&& value) {
  
  alias_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Message.alias)
}
inline void Message::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Message.alias)
}
inline void Message::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Message.alias)
}
inline std::string* Message::_internal_mutable_alias() {
  
  return alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message::release_alias() {
  // @@protoc_insertion_point(field_release:proto.Message.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Message.alias)
}

// string message = 2;
inline void Message::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Message::message() const {
  // @@protoc_insertion_point(field_get:proto.Message.message)
  return _internal_message();
}
inline void Message::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:proto.Message.message)
}
inline std::string* Message::mutable_message() {
  // @@protoc_insertion_point(field_mutable:proto.Message.message)
  return _internal_mutable_message();
}
inline const std::string& Message::_internal_message() const {
  return message_.Get();
}
inline void Message::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Message.message)
}
inline void Message::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Message.message)
}
inline void Message::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Message.message)
}
inline std::string* Message::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message::release_message() {
  // @@protoc_insertion_point(field_release:proto.Message.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Message.message)
}

// -------------------------------------------------------------------

// Information

// int32 connect = 1;
inline bool Information::_internal_has_connect() const {
  return type_case() == kConnect;
}
inline bool Information::has_connect() const {
  return _internal_has_connect();
}
inline void Information::set_has_connect() {
  _oneof_case_[0] = kConnect;
}
inline void Information::clear_connect() {
  if (_internal_has_connect()) {
    type_.connect_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::_internal_connect() const {
  if (_internal_has_connect()) {
    return type_.connect_;
  }
  return 0;
}
inline void Information::_internal_set_connect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_connect()) {
    clear_type();
    set_has_connect();
  }
  type_.connect_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::connect() const {
  // @@protoc_insertion_point(field_get:proto.Information.connect)
  return _internal_connect();
}
inline void Information::set_connect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_connect(value);
  // @@protoc_insertion_point(field_set:proto.Information.connect)
}

// int32 disconnect = 2;
inline bool Information::_internal_has_disconnect() const {
  return type_case() == kDisconnect;
}
inline bool Information::has_disconnect() const {
  return _internal_has_disconnect();
}
inline void Information::set_has_disconnect() {
  _oneof_case_[0] = kDisconnect;
}
inline void Information::clear_disconnect() {
  if (_internal_has_disconnect()) {
    type_.disconnect_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::_internal_disconnect() const {
  if (_internal_has_disconnect()) {
    return type_.disconnect_;
  }
  return 0;
}
inline void Information::_internal_set_disconnect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_disconnect()) {
    clear_type();
    set_has_disconnect();
  }
  type_.disconnect_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::disconnect() const {
  // @@protoc_insertion_point(field_get:proto.Information.disconnect)
  return _internal_disconnect();
}
inline void Information::set_disconnect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_disconnect(value);
  // @@protoc_insertion_point(field_set:proto.Information.disconnect)
}

// int32 keepAlive = 3;
inline bool Information::_internal_has_keepalive() const {
  return type_case() == kKeepAlive;
}
inline bool Information::has_keepalive() const {
  return _internal_has_keepalive();
}
inline void Information::set_has_keepalive() {
  _oneof_case_[0] = kKeepAlive;
}
inline void Information::clear_keepalive() {
  if (_internal_has_keepalive()) {
    type_.keepalive_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::_internal_keepalive() const {
  if (_internal_has_keepalive()) {
    return type_.keepalive_;
  }
  return 0;
}
inline void Information::_internal_set_keepalive(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_keepalive()) {
    clear_type();
    set_has_keepalive();
  }
  type_.keepalive_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::keepalive() const {
  // @@protoc_insertion_point(field_get:proto.Information.keepAlive)
  return _internal_keepalive();
}
inline void Information::set_keepalive(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keepalive(value);
  // @@protoc_insertion_point(field_set:proto.Information.keepAlive)
}

// .proto.Account signup = 4;
inline bool Information::_internal_has_signup() const {
  return type_case() == kSignup;
}
inline bool Information::has_signup() const {
  return _internal_has_signup();
}
inline void Information::set_has_signup() {
  _oneof_case_[0] = kSignup;
}
inline void Information::clear_signup() {
  if (_internal_has_signup()) {
    if (GetArena() == nullptr) {
      delete type_.signup_;
    }
    clear_has_type();
  }
}
inline ::proto::Account* Information::release_signup() {
  // @@protoc_insertion_point(field_release:proto.Information.signup)
  if (_internal_has_signup()) {
    clear_has_type();
      ::proto::Account* temp = type_.signup_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.signup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Account& Information::_internal_signup() const {
  return _internal_has_signup()
      ? *type_.signup_
      : reinterpret_cast< ::proto::Account&>(::proto::_Account_default_instance_);
}
inline const ::proto::Account& Information::signup() const {
  // @@protoc_insertion_point(field_get:proto.Information.signup)
  return _internal_signup();
}
inline ::proto::Account* Information::unsafe_arena_release_signup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Information.signup)
  if (_internal_has_signup()) {
    clear_has_type();
    ::proto::Account* temp = type_.signup_;
    type_.signup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Information::unsafe_arena_set_allocated_signup(::proto::Account* signup) {
  clear_type();
  if (signup) {
    set_has_signup();
    type_.signup_ = signup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Information.signup)
}
inline ::proto::Account* Information::_internal_mutable_signup() {
  if (!_internal_has_signup()) {
    clear_type();
    set_has_signup();
    type_.signup_ = CreateMaybeMessage< ::proto::Account >(GetArena());
  }
  return type_.signup_;
}
inline ::proto::Account* Information::mutable_signup() {
  // @@protoc_insertion_point(field_mutable:proto.Information.signup)
  return _internal_mutable_signup();
}

// .proto.Account login = 5;
inline bool Information::_internal_has_login() const {
  return type_case() == kLogin;
}
inline bool Information::has_login() const {
  return _internal_has_login();
}
inline void Information::set_has_login() {
  _oneof_case_[0] = kLogin;
}
inline void Information::clear_login() {
  if (_internal_has_login()) {
    if (GetArena() == nullptr) {
      delete type_.login_;
    }
    clear_has_type();
  }
}
inline ::proto::Account* Information::release_login() {
  // @@protoc_insertion_point(field_release:proto.Information.login)
  if (_internal_has_login()) {
    clear_has_type();
      ::proto::Account* temp = type_.login_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Account& Information::_internal_login() const {
  return _internal_has_login()
      ? *type_.login_
      : reinterpret_cast< ::proto::Account&>(::proto::_Account_default_instance_);
}
inline const ::proto::Account& Information::login() const {
  // @@protoc_insertion_point(field_get:proto.Information.login)
  return _internal_login();
}
inline ::proto::Account* Information::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Information.login)
  if (_internal_has_login()) {
    clear_has_type();
    ::proto::Account* temp = type_.login_;
    type_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Information::unsafe_arena_set_allocated_login(::proto::Account* login) {
  clear_type();
  if (login) {
    set_has_login();
    type_.login_ = login;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Information.login)
}
inline ::proto::Account* Information::_internal_mutable_login() {
  if (!_internal_has_login()) {
    clear_type();
    set_has_login();
    type_.login_ = CreateMaybeMessage< ::proto::Account >(GetArena());
  }
  return type_.login_;
}
inline ::proto::Account* Information::mutable_login() {
  // @@protoc_insertion_point(field_mutable:proto.Information.login)
  return _internal_mutable_login();
}

// .proto.Account alter = 6;
inline bool Information::_internal_has_alter() const {
  return type_case() == kAlter;
}
inline bool Information::has_alter() const {
  return _internal_has_alter();
}
inline void Information::set_has_alter() {
  _oneof_case_[0] = kAlter;
}
inline void Information::clear_alter() {
  if (_internal_has_alter()) {
    if (GetArena() == nullptr) {
      delete type_.alter_;
    }
    clear_has_type();
  }
}
inline ::proto::Account* Information::release_alter() {
  // @@protoc_insertion_point(field_release:proto.Information.alter)
  if (_internal_has_alter()) {
    clear_has_type();
      ::proto::Account* temp = type_.alter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.alter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Account& Information::_internal_alter() const {
  return _internal_has_alter()
      ? *type_.alter_
      : reinterpret_cast< ::proto::Account&>(::proto::_Account_default_instance_);
}
inline const ::proto::Account& Information::alter() const {
  // @@protoc_insertion_point(field_get:proto.Information.alter)
  return _internal_alter();
}
inline ::proto::Account* Information::unsafe_arena_release_alter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Information.alter)
  if (_internal_has_alter()) {
    clear_has_type();
    ::proto::Account* temp = type_.alter_;
    type_.alter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Information::unsafe_arena_set_allocated_alter(::proto::Account* alter) {
  clear_type();
  if (alter) {
    set_has_alter();
    type_.alter_ = alter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Information.alter)
}
inline ::proto::Account* Information::_internal_mutable_alter() {
  if (!_internal_has_alter()) {
    clear_type();
    set_has_alter();
    type_.alter_ = CreateMaybeMessage< ::proto::Account >(GetArena());
  }
  return type_.alter_;
}
inline ::proto::Account* Information::mutable_alter() {
  // @@protoc_insertion_point(field_mutable:proto.Information.alter)
  return _internal_mutable_alter();
}

// int32 game9 = 7;
inline bool Information::_internal_has_game9() const {
  return type_case() == kGame9;
}
inline bool Information::has_game9() const {
  return _internal_has_game9();
}
inline void Information::set_has_game9() {
  _oneof_case_[0] = kGame9;
}
inline void Information::clear_game9() {
  if (_internal_has_game9()) {
    type_.game9_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::_internal_game9() const {
  if (_internal_has_game9()) {
    return type_.game9_;
  }
  return 0;
}
inline void Information::_internal_set_game9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_game9()) {
    clear_type();
    set_has_game9();
  }
  type_.game9_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::game9() const {
  // @@protoc_insertion_point(field_get:proto.Information.game9)
  return _internal_game9();
}
inline void Information::set_game9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game9(value);
  // @@protoc_insertion_point(field_set:proto.Information.game9)
}

// int32 game1v1 = 8;
inline bool Information::_internal_has_game1v1() const {
  return type_case() == kGame1V1;
}
inline bool Information::has_game1v1() const {
  return _internal_has_game1v1();
}
inline void Information::set_has_game1v1() {
  _oneof_case_[0] = kGame1V1;
}
inline void Information::clear_game1v1() {
  if (_internal_has_game1v1()) {
    type_.game1v1_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::_internal_game1v1() const {
  if (_internal_has_game1v1()) {
    return type_.game1v1_;
  }
  return 0;
}
inline void Information::_internal_set_game1v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_game1v1()) {
    clear_type();
    set_has_game1v1();
  }
  type_.game1v1_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::game1v1() const {
  // @@protoc_insertion_point(field_get:proto.Information.game1v1)
  return _internal_game1v1();
}
inline void Information::set_game1v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game1v1(value);
  // @@protoc_insertion_point(field_set:proto.Information.game1v1)
}

// int32 game_single = 9;
inline bool Information::_internal_has_game_single() const {
  return type_case() == kGameSingle;
}
inline bool Information::has_game_single() const {
  return _internal_has_game_single();
}
inline void Information::set_has_game_single() {
  _oneof_case_[0] = kGameSingle;
}
inline void Information::clear_game_single() {
  if (_internal_has_game_single()) {
    type_.game_single_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::_internal_game_single() const {
  if (_internal_has_game_single()) {
    return type_.game_single_;
  }
  return 0;
}
inline void Information::_internal_set_game_single(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_game_single()) {
    clear_type();
    set_has_game_single();
  }
  type_.game_single_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::game_single() const {
  // @@protoc_insertion_point(field_get:proto.Information.game_single)
  return _internal_game_single();
}
inline void Information::set_game_single(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_single(value);
  // @@protoc_insertion_point(field_set:proto.Information.game_single)
}

// .proto.Message message = 10;
inline bool Information::_internal_has_message() const {
  return type_case() == kMessage;
}
inline bool Information::has_message() const {
  return _internal_has_message();
}
inline void Information::set_has_message() {
  _oneof_case_[0] = kMessage;
}
inline void Information::clear_message() {
  if (_internal_has_message()) {
    if (GetArena() == nullptr) {
      delete type_.message_;
    }
    clear_has_type();
  }
}
inline ::proto::Message* Information::release_message() {
  // @@protoc_insertion_point(field_release:proto.Information.message)
  if (_internal_has_message()) {
    clear_has_type();
      ::proto::Message* temp = type_.message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Message& Information::_internal_message() const {
  return _internal_has_message()
      ? *type_.message_
      : reinterpret_cast< ::proto::Message&>(::proto::_Message_default_instance_);
}
inline const ::proto::Message& Information::message() const {
  // @@protoc_insertion_point(field_get:proto.Information.message)
  return _internal_message();
}
inline ::proto::Message* Information::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Information.message)
  if (_internal_has_message()) {
    clear_has_type();
    ::proto::Message* temp = type_.message_;
    type_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Information::unsafe_arena_set_allocated_message(::proto::Message* message) {
  clear_type();
  if (message) {
    set_has_message();
    type_.message_ = message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Information.message)
}
inline ::proto::Message* Information::_internal_mutable_message() {
  if (!_internal_has_message()) {
    clear_type();
    set_has_message();
    type_.message_ = CreateMaybeMessage< ::proto::Message >(GetArena());
  }
  return type_.message_;
}
inline ::proto::Message* Information::mutable_message() {
  // @@protoc_insertion_point(field_mutable:proto.Information.message)
  return _internal_mutable_message();
}

// .proto.Account points = 11;
inline bool Information::_internal_has_points() const {
  return type_case() == kPoints;
}
inline bool Information::has_points() const {
  return _internal_has_points();
}
inline void Information::set_has_points() {
  _oneof_case_[0] = kPoints;
}
inline void Information::clear_points() {
  if (_internal_has_points()) {
    if (GetArena() == nullptr) {
      delete type_.points_;
    }
    clear_has_type();
  }
}
inline ::proto::Account* Information::release_points() {
  // @@protoc_insertion_point(field_release:proto.Information.points)
  if (_internal_has_points()) {
    clear_has_type();
      ::proto::Account* temp = type_.points_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.points_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Account& Information::_internal_points() const {
  return _internal_has_points()
      ? *type_.points_
      : reinterpret_cast< ::proto::Account&>(::proto::_Account_default_instance_);
}
inline const ::proto::Account& Information::points() const {
  // @@protoc_insertion_point(field_get:proto.Information.points)
  return _internal_points();
}
inline ::proto::Account* Information::unsafe_arena_release_points() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Information.points)
  if (_internal_has_points()) {
    clear_has_type();
    ::proto::Account* temp = type_.points_;
    type_.points_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Information::unsafe_arena_set_allocated_points(::proto::Account* points) {
  clear_type();
  if (points) {
    set_has_points();
    type_.points_ = points;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Information.points)
}
inline ::proto::Account* Information::_internal_mutable_points() {
  if (!_internal_has_points()) {
    clear_type();
    set_has_points();
    type_.points_ = CreateMaybeMessage< ::proto::Account >(GetArena());
  }
  return type_.points_;
}
inline ::proto::Account* Information::mutable_points() {
  // @@protoc_insertion_point(field_mutable:proto.Information.points)
  return _internal_mutable_points();
}

// int32 error = 12;
inline bool Information::_internal_has_error() const {
  return type_case() == kError;
}
inline bool Information::has_error() const {
  return _internal_has_error();
}
inline void Information::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Information::clear_error() {
  if (_internal_has_error()) {
    type_.error_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::_internal_error() const {
  if (_internal_has_error()) {
    return type_.error_;
  }
  return 0;
}
inline void Information::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_error()) {
    clear_type();
    set_has_error();
  }
  type_.error_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::error() const {
  // @@protoc_insertion_point(field_get:proto.Information.error)
  return _internal_error();
}
inline void Information::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:proto.Information.error)
}

inline bool Information::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Information::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Information::TypeCase Information::type_case() const {
  return Information::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Instruction

// int32 clockwise = 1;
inline bool Instruction::_internal_has_clockwise() const {
  return type_case() == kClockwise;
}
inline bool Instruction::has_clockwise() const {
  return _internal_has_clockwise();
}
inline void Instruction::set_has_clockwise() {
  _oneof_case_[0] = kClockwise;
}
inline void Instruction::clear_clockwise() {
  if (_internal_has_clockwise()) {
    type_.clockwise_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::_internal_clockwise() const {
  if (_internal_has_clockwise()) {
    return type_.clockwise_;
  }
  return 0;
}
inline void Instruction::_internal_set_clockwise(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_clockwise()) {
    clear_type();
    set_has_clockwise();
  }
  type_.clockwise_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::clockwise() const {
  // @@protoc_insertion_point(field_get:proto.Instruction.clockwise)
  return _internal_clockwise();
}
inline void Instruction::set_clockwise(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clockwise(value);
  // @@protoc_insertion_point(field_set:proto.Instruction.clockwise)
}

// int32 counterclockwise = 2;
inline bool Instruction::_internal_has_counterclockwise() const {
  return type_case() == kCounterclockwise;
}
inline bool Instruction::has_counterclockwise() const {
  return _internal_has_counterclockwise();
}
inline void Instruction::set_has_counterclockwise() {
  _oneof_case_[0] = kCounterclockwise;
}
inline void Instruction::clear_counterclockwise() {
  if (_internal_has_counterclockwise()) {
    type_.counterclockwise_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::_internal_counterclockwise() const {
  if (_internal_has_counterclockwise()) {
    return type_.counterclockwise_;
  }
  return 0;
}
inline void Instruction::_internal_set_counterclockwise(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_counterclockwise()) {
    clear_type();
    set_has_counterclockwise();
  }
  type_.counterclockwise_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::counterclockwise() const {
  // @@protoc_insertion_point(field_get:proto.Instruction.counterclockwise)
  return _internal_counterclockwise();
}
inline void Instruction::set_counterclockwise(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_counterclockwise(value);
  // @@protoc_insertion_point(field_set:proto.Instruction.counterclockwise)
}

// int32 down = 3;
inline bool Instruction::_internal_has_down() const {
  return type_case() == kDown;
}
inline bool Instruction::has_down() const {
  return _internal_has_down();
}
inline void Instruction::set_has_down() {
  _oneof_case_[0] = kDown;
}
inline void Instruction::clear_down() {
  if (_internal_has_down()) {
    type_.down_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::_internal_down() const {
  if (_internal_has_down()) {
    return type_.down_;
  }
  return 0;
}
inline void Instruction::_internal_set_down(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_down()) {
    clear_type();
    set_has_down();
  }
  type_.down_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::down() const {
  // @@protoc_insertion_point(field_get:proto.Instruction.down)
  return _internal_down();
}
inline void Instruction::set_down(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:proto.Instruction.down)
}

// int32 right = 4;
inline bool Instruction::_internal_has_right() const {
  return type_case() == kRight;
}
inline bool Instruction::has_right() const {
  return _internal_has_right();
}
inline void Instruction::set_has_right() {
  _oneof_case_[0] = kRight;
}
inline void Instruction::clear_right() {
  if (_internal_has_right()) {
    type_.right_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::_internal_right() const {
  if (_internal_has_right()) {
    return type_.right_;
  }
  return 0;
}
inline void Instruction::_internal_set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_right()) {
    clear_type();
    set_has_right();
  }
  type_.right_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::right() const {
  // @@protoc_insertion_point(field_get:proto.Instruction.right)
  return _internal_right();
}
inline void Instruction::set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:proto.Instruction.right)
}

// int32 left = 5;
inline bool Instruction::_internal_has_left() const {
  return type_case() == kLeft;
}
inline bool Instruction::has_left() const {
  return _internal_has_left();
}
inline void Instruction::set_has_left() {
  _oneof_case_[0] = kLeft;
}
inline void Instruction::clear_left() {
  if (_internal_has_left()) {
    type_.left_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::_internal_left() const {
  if (_internal_has_left()) {
    return type_.left_;
  }
  return 0;
}
inline void Instruction::_internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_left()) {
    clear_type();
    set_has_left();
  }
  type_.left_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::left() const {
  // @@protoc_insertion_point(field_get:proto.Instruction.left)
  return _internal_left();
}
inline void Instruction::set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:proto.Instruction.left)
}

// int32 drop = 6;
inline bool Instruction::_internal_has_drop() const {
  return type_case() == kDrop;
}
inline bool Instruction::has_drop() const {
  return _internal_has_drop();
}
inline void Instruction::set_has_drop() {
  _oneof_case_[0] = kDrop;
}
inline void Instruction::clear_drop() {
  if (_internal_has_drop()) {
    type_.drop_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::_internal_drop() const {
  if (_internal_has_drop()) {
    return type_.drop_;
  }
  return 0;
}
inline void Instruction::_internal_set_drop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_drop()) {
    clear_type();
    set_has_drop();
  }
  type_.drop_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::drop() const {
  // @@protoc_insertion_point(field_get:proto.Instruction.drop)
  return _internal_drop();
}
inline void Instruction::set_drop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drop(value);
  // @@protoc_insertion_point(field_set:proto.Instruction.drop)
}

// int32 swap_block = 7;
inline bool Instruction::_internal_has_swap_block() const {
  return type_case() == kSwapBlock;
}
inline bool Instruction::has_swap_block() const {
  return _internal_has_swap_block();
}
inline void Instruction::set_has_swap_block() {
  _oneof_case_[0] = kSwapBlock;
}
inline void Instruction::clear_swap_block() {
  if (_internal_has_swap_block()) {
    type_.swap_block_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::_internal_swap_block() const {
  if (_internal_has_swap_block()) {
    return type_.swap_block_;
  }
  return 0;
}
inline void Instruction::_internal_set_swap_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_swap_block()) {
    clear_type();
    set_has_swap_block();
  }
  type_.swap_block_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::swap_block() const {
  // @@protoc_insertion_point(field_get:proto.Instruction.swap_block)
  return _internal_swap_block();
}
inline void Instruction::set_swap_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_swap_block(value);
  // @@protoc_insertion_point(field_set:proto.Instruction.swap_block)
}

// int32 stack_clear = 8;
inline bool Instruction::_internal_has_stack_clear() const {
  return type_case() == kStackClear;
}
inline bool Instruction::has_stack_clear() const {
  return _internal_has_stack_clear();
}
inline void Instruction::set_has_stack_clear() {
  _oneof_case_[0] = kStackClear;
}
inline void Instruction::clear_stack_clear() {
  if (_internal_has_stack_clear()) {
    type_.stack_clear_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::_internal_stack_clear() const {
  if (_internal_has_stack_clear()) {
    return type_.stack_clear_;
  }
  return 0;
}
inline void Instruction::_internal_set_stack_clear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_stack_clear()) {
    clear_type();
    set_has_stack_clear();
  }
  type_.stack_clear_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::stack_clear() const {
  // @@protoc_insertion_point(field_get:proto.Instruction.stack_clear)
  return _internal_stack_clear();
}
inline void Instruction::set_stack_clear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stack_clear(value);
  // @@protoc_insertion_point(field_set:proto.Instruction.stack_clear)
}

// int32 random_seed = 9;
inline bool Instruction::_internal_has_random_seed() const {
  return type_case() == kRandomSeed;
}
inline bool Instruction::has_random_seed() const {
  return _internal_has_random_seed();
}
inline void Instruction::set_has_random_seed() {
  _oneof_case_[0] = kRandomSeed;
}
inline void Instruction::clear_random_seed() {
  if (_internal_has_random_seed()) {
    type_.random_seed_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::_internal_random_seed() const {
  if (_internal_has_random_seed()) {
    return type_.random_seed_;
  }
  return 0;
}
inline void Instruction::_internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_random_seed()) {
    clear_type();
    set_has_random_seed();
  }
  type_.random_seed_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::random_seed() const {
  // @@protoc_insertion_point(field_get:proto.Instruction.random_seed)
  return _internal_random_seed();
}
inline void Instruction::set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:proto.Instruction.random_seed)
}

// int32 ready_to_start = 10;
inline bool Instruction::_internal_has_ready_to_start() const {
  return type_case() == kReadyToStart;
}
inline bool Instruction::has_ready_to_start() const {
  return _internal_has_ready_to_start();
}
inline void Instruction::set_has_ready_to_start() {
  _oneof_case_[0] = kReadyToStart;
}
inline void Instruction::clear_ready_to_start() {
  if (_internal_has_ready_to_start()) {
    type_.ready_to_start_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::_internal_ready_to_start() const {
  if (_internal_has_ready_to_start()) {
    return type_.ready_to_start_;
  }
  return 0;
}
inline void Instruction::_internal_set_ready_to_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_ready_to_start()) {
    clear_type();
    set_has_ready_to_start();
  }
  type_.ready_to_start_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::ready_to_start() const {
  // @@protoc_insertion_point(field_get:proto.Instruction.ready_to_start)
  return _internal_ready_to_start();
}
inline void Instruction::set_ready_to_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ready_to_start(value);
  // @@protoc_insertion_point(field_set:proto.Instruction.ready_to_start)
}

// int32 game_over = 11;
inline bool Instruction::_internal_has_game_over() const {
  return type_case() == kGameOver;
}
inline bool Instruction::has_game_over() const {
  return _internal_has_game_over();
}
inline void Instruction::set_has_game_over() {
  _oneof_case_[0] = kGameOver;
}
inline void Instruction::clear_game_over() {
  if (_internal_has_game_over()) {
    type_.game_over_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::_internal_game_over() const {
  if (_internal_has_game_over()) {
    return type_.game_over_;
  }
  return 0;
}
inline void Instruction::_internal_set_game_over(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_game_over()) {
    clear_type();
    set_has_game_over();
  }
  type_.game_over_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Instruction::game_over() const {
  // @@protoc_insertion_point(field_get:proto.Instruction.game_over)
  return _internal_game_over();
}
inline void Instruction::set_game_over(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_over(value);
  // @@protoc_insertion_point(field_set:proto.Instruction.game_over)
}

inline bool Instruction::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Instruction::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Instruction::TypeCase Instruction::type_case() const {
  return Instruction::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::Account_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::Account_Status>() {
  return ::proto::Account_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tetris_2eproto
